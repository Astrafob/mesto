(()=>{"use strict";const t={formSelector:".popup__edit-form",inputSelector:".popup__input-text",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button-type-inactive",inputErrorBorderClass:"popup__input-text_type_error",inputErrorClass:"popup__input-error",errorClass:"popup__input-error_visible"};class e{constructor(t,e,s){this._title=t.name,this._link=t.link,this._templateSelector=e,this._imageClickHendler=s}_createCardElement(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}_setData(){const t=this._newCard.querySelector(".card__image"),e=this._newCard.querySelector(".card__title");t.alt=this._title,t.src=this._link,e.textContent=this._title}_deleteCard(){this._newCard.remove(),this._newCard=null}_toggleLike(t){t.target.classList.toggle("card__button-like_active")}_setEventListeners(){this._newCard.querySelector(".card__delete").addEventListener("click",(()=>{this._deleteCard()})),this._newCard.querySelector(".card__button-like").addEventListener("click",(t=>{this._toggleLike(t)})),this._newCard.querySelector(".card__image").addEventListener("click",(()=>{this._imageClickHendler(this._title,this._link)}))}getCard(){return this._newCard=this._createCardElement(),this._setData(),this._setEventListeners(),this._newCard}}class s{constructor(t,e){this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorBorderClass=t.inputErrorBorderClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=e,this._inputList=Array.from(e.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector)}_showInputError(t){const e=this._form.querySelector(`.${t.id}-error`);e.classList.add(this._errorClass),e.textContent=t.validationMessage,t.classList.add(this._inputErrorBorderClass)}_hideInputError(t){const e=this._form.querySelector(`.${t.id}-error`);e.classList.remove(this._errorClass),e.textContent="",t.classList.remove(this._inputErrorBorderClass)}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_hasInvalidInput(t){return t.some((t=>!t.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._toggleButtonState(),this._form.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleButtonState()}),0)})),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._buttonElement.disabled=!0,this._inputList.forEach((t=>{this._hideInputError(t)}))}enableValidation(){this._form.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}}class r{constructor(t){this._popup=t,this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._popup.addEventListener("click",(t=>{(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__close-button"))&&this.close()}))}}class i extends r{constructor(t,e){super(t),this._callbackSubmitForm=e,this._elementForm=this._popup.querySelector(".popup__edit-form"),this._inputList=this._popup.querySelectorAll(".popup__input-text")}_getInputValues(){return this._inputValues={},this._inputList.forEach((t=>{this._inputValues[t.name]=t.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._elementForm.addEventListener("submit",(t=>{t.preventDefault(),this._objectInputs=this._getInputValues(),this._callbackSubmitForm(this._objectInputs),this.close()}))}close(){super.close(),this._elementForm.reset()}}const n=document.querySelector("#popupEditProfile"),o=document.querySelector("#popupAddCard"),a=document.querySelector("#popupViewPhoto"),l=document.querySelector(".profile"),p=document.querySelector(".cards"),c=l.querySelector(".button_edit_open"),u=l.querySelector(".button_add_open"),_=l.querySelector(".profile__title"),d=l.querySelector(".profile__subtitle"),h=n.querySelector("#nameVisitor"),m=n.querySelector("#jobVisitor"),v=new s(t,n),E=new s(t,o),C=new class{constructor({items:t,renderer:e},s){this._container=s,this._items=t,this._renderer=e}rendererItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}({items:[{name:"Архыз",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"},{name:"Челябинская область",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{name:"Иваново",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{name:"Камчатка",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{name:"Холмогорский район",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{name:"Байкал",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"}],renderer:t=>{C.addItem(k(t))}},p),b=new class extends r{constructor(t){super(t),this._popupImage=t.querySelector(".popup__image"),this._popupCaptionImage=t.querySelector(".popup__caption-image")}open(t,e){this._popupImage.src=e,this._popupImage.alt=t,this._popupCaptionImage.textContent=t,super.open()}}(a),y=new i(n,(function(t){g.setUserInfo(t)})),S=new i(o,(function(t){C.addItem(k(t))})),g=new class{constructor({nameVisitor:t,jobVisitor:e}){this._nameVisitor=t,this._jobVisitor=e}getUserInfo(){return{name:this._nameVisitor.textContent,job:this._jobVisitor.textContent}}setUserInfo(t){this._data=t,this._nameVisitor.textContent=this._data.name,this._jobVisitor.textContent=this._data.job}}({nameVisitor:_,jobVisitor:d}),L=(t,e)=>{b.open(t,e)},k=t=>(console.log(t),new e(t,"#card",L).getCard());c.addEventListener("click",(()=>{const t=g.getUserInfo();h.value=t.name,m.value=t.job,y.open()})),u.addEventListener("click",(()=>{S.open()})),v.enableValidation(),E.enableValidation(),C.rendererItems(),y.setEventListeners(),S.setEventListeners(),b.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,